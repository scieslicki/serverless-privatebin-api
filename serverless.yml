service: serverless-privatebin-api

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  tableName: ${self:custom.stage}-privatebin

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: eu-central-1
  profile: metano

  environment:
    tableName: ${self:custom.tableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ PrivateBinTable, Arn ]

resources:
  # API Gateway Errors
#  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}

functions:
  create:
    handler: src/create.main
#    layers:
#      - {Ref: DepsLambdaLayer}
    events:
      - http:
          path: privatebin
          method: post
          cors: true
#          authorizer: aws_iam
  get:
    handler: src/get.main
#    layers:
#      - {Ref: DepsLambdaLayer}
    events:
      - http:
          path: privatebin/{id}
          method: get
          cors: true

  list:
    handler: src/list.main
#    layers:
#      - {Ref: DepsLambdaLayer}
    events:
      - http:
          path: privatebin
          method: get
          cors: true

  update:
    handler: src/update.main
#    layers:
#      - {Ref: DepsLambdaLayer}
    events:
      - http:
          path: privatebin/{id}
          method: put
          cors: true

  delete:
    handler: src/delete.main
#    layers:
#      - {Ref: DepsLambdaLayer}
    events:
      - http:
          path: privatebin/{id}
          method: delete
          cors: true

#layers:
#  deps:
#    path: node_modules